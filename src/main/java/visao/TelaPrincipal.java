package visao;

import java.util.Timer;
import java.util.TimerTask;
import Conexao.conexao;
import dao.ConversaDAO;
import dao.MensagensDAO;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import modal.Conversa;
import modal.Menssagens;

/**
 *
 * @author RAG
 */
public class TelaPrincipal extends javax.swing.JFrame {

    TelaCadastro TelaC = new TelaCadastro();
    private boolean cadastroAberto = false;
    Conversa mConversa = new Conversa();
    Menssagens mMenssagens = new Menssagens();
    ConversaDAO dConversa = new ConversaDAO();
    MensagensDAO dMensagens = new MensagensDAO();
    conexao conn = new conexao();
    int idUsuario;
    Map<String, String> usuarioNomes = new HashMap<>();
 
    int idConversa = 0;
    String loginUsuario, nomeUsuarioSelecionado, mensagem, mensagemNova;
    private int lastSelectedIndex = -1;

    /**
     * Creates new form TelaPrincipal
     *
     * @param usuario_id
     * @param login
     */
    public TelaPrincipal(int usuario_id, String login) {
        initComponents();
        try {
            adicionaBotoesUsuarios(usuario_id);
            idUsuario = usuario_id;
        } catch (IOException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.loginUsuario = login;
        ImageIcon icon = new ImageIcon("/storage/RAG/ZapREDHAT/src/IMG/2311531.png");
        java.awt.Image img = icon.getImage();
        jButtonMenu.setSize(50, 50);
        java.awt.Image newimg = img.getScaledInstance(jButtonMenu.getWidth(), jButtonMenu.getHeight(), java.awt.Image.SCALE_SMOOTH);
        icon = new ImageIcon(newimg);
        // Atribua o ícone ao botão
        jButtonMenu.setIcon(icon);
        jButtonMenu.repaint();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    }

    /**
     * This method is called from within the construcadastroAbertoctor to
     * initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItem = new javax.swing.JMenuItem();
        jMenuItemLogout = new javax.swing.JMenuItem();
        jPanelPrincipal = new javax.swing.JPanel();
        jPanelConversa = new javax.swing.JPanel();
        jPanelMenssagens = new javax.swing.JPanel();
        jLabelMenssagem = new javax.swing.JLabel();
        jButtonEnviar = new javax.swing.JButton();
        jTextFieldMensagens = new javax.swing.JTextField();
        jButtonMenu = new javax.swing.JButton();

        jPopupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuPopupMenuWillBecomeVisible(evt);
            }
        });

        jMenuItem.setText("Cadastro");
        jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItem);

        jMenuItemLogout.setText("Logout");
        jMenuItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLogoutActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemLogout);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");

        jPanelPrincipal.setBackground(new java.awt.Color(51, 51, 51));
        jPanelPrincipal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelPrincipal.setForeground(new java.awt.Color(51, 51, 51));

        jPanelConversa.setBackground(new java.awt.Color(51, 51, 51));
        jPanelConversa.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Conversas", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Hack Nerd Font", 1, 24), new java.awt.Color(204, 204, 204))); // NOI18N

        javax.swing.GroupLayout jPanelConversaLayout = new javax.swing.GroupLayout(jPanelConversa);
        jPanelConversa.setLayout(jPanelConversaLayout);
        jPanelConversaLayout.setHorizontalGroup(
            jPanelConversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
        jPanelConversaLayout.setVerticalGroup(
            jPanelConversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabelMenssagem.setToolTipText("");
        jLabelMenssagem.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Hack", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        jLabelMenssagem.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jLabelMenssagemAncestorResized(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenssagensLayout = new javax.swing.GroupLayout(jPanelMenssagens);
        jPanelMenssagens.setLayout(jPanelMenssagensLayout);
        jPanelMenssagensLayout.setHorizontalGroup(
            jPanelMenssagensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelMenssagem, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
        );
        jPanelMenssagensLayout.setVerticalGroup(
            jPanelMenssagensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelMenssagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );

        jButtonEnviar.setBackground(new java.awt.Color(51, 51, 51));
        jButtonEnviar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonEnviar.setText("Enviar");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarActionPerformed(evt);
            }
        });

        jTextFieldMensagens.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldMensagens.setForeground(new java.awt.Color(102, 102, 102));
        jTextFieldMensagens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMensagensActionPerformed(evt);
            }
        });
        jTextFieldMensagens.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMensagensKeyPressed(evt);
            }
        });

        jButtonMenu.setForeground(new java.awt.Color(51, 51, 51));
        jButtonMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPrincipalLayout = new javax.swing.GroupLayout(jPanelPrincipal);
        jPanelPrincipal.setLayout(jPanelPrincipalLayout);
        jPanelPrincipalLayout.setHorizontalGroup(
            jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addComponent(jPanelConversa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                                .addComponent(jTextFieldMensagens)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))
                            .addComponent(jPanelMenssagens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12))
        );
        jPanelPrincipalLayout.setVerticalGroup(
            jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelConversa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jButtonMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelMenssagens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldMensagens, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldMensagensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMensagensActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMensagensActionPerformed

    private void jTextFieldMensagensKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMensagensKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // Correção aqui
            jButtonEnviarActionPerformed(null);
        }
    }//GEN-LAST:event_jTextFieldMensagensKeyPressed

    private void jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarActionPerformed
        mandarMensagem();
    }//GEN-LAST:event_jButtonEnviarActionPerformed

    private void jButtonMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuActionPerformed
        jPopupMenu.show(jButtonMenu, 0, jButtonMenu.getHeight());

    }//GEN-LAST:event_jButtonMenuActionPerformed

    private void jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemActionPerformed
        if (!cadastroAberto) {
            TelaC = new TelaCadastro();
            TelaC.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            TelaC.setVisible(true);
            cadastroAberto = true;

            // Adicione um listener para detectar o fechamento da janela de cadastro
            TelaC.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    cadastroAberto = false;
                }
            });
        } else {
            // Se a janela já estiver aberta, traga-a para o topo
            TelaC.toFront();
        }
    }//GEN-LAST:event_jMenuItemActionPerformed

    private void jPopupMenuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuPopupMenuWillBecomeVisible
        jMenuItem = new javax.swing.JMenuItem();
        jMenuItem.addActionListener(this::jMenuItemActionPerformed);
        jPopupMenu.add(jMenuItem);

    }//GEN-LAST:event_jPopupMenuPopupMenuWillBecomeVisible

    private void jMenuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLogoutActionPerformed
        TelaLogin t = new TelaLogin();
        t.setVisible(true);
        dispose();

    }//GEN-LAST:event_jMenuItemLogoutActionPerformed

    private void jLabelMenssagemAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jLabelMenssagemAncestorResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelMenssagemAncestorResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TelaPrincipal(0, "").setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JButton jButtonMenu;
    private javax.swing.JLabel jLabelMenssagem;
    private javax.swing.JMenuItem jMenuItem;
    private javax.swing.JMenuItem jMenuItemLogout;
    private javax.swing.JPanel jPanelConversa;
    private javax.swing.JPanel jPanelMenssagens;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JTextField jTextFieldMensagens;
    // End of variables declaration//GEN-END:variables

    public void atualizaMensagens() throws SQLException {

    }

        private void trataConversa(String conversa, Date data, Time hora) {
        List<String> mensagens = extrairMensagem(conversa);
        // Certifique-se de que a variável usuarioNomes esteja disponível na classe ou método

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SimpleDateFormat titleFormat = new SimpleDateFormat("d 'de' MMMM", new Locale("pt", "BR"));

        JPanel panelMensagens = new JPanel();
        panelMensagens.setLayout(new BoxLayout(panelMensagens, BoxLayout.Y_AXIS));

        if (mensagens.isEmpty()) {
            jPanelMenssagens.removeAll();
            jPanelMenssagens.setLayout(new BorderLayout());
            JLabel labelVazio = new JLabel("A conversa está vazia.");
            labelVazio.setHorizontalAlignment(SwingConstants.CENTER);
            jPanelMenssagens.add(labelVazio, BorderLayout.CENTER);
            revalidate();
            repaint();
            setVisible(true);
        } else {
            String dataAnterior = null;
            for (String mensagem : mensagens) {
                String dataMensagem = extrairDataMensagem(mensagem);
                String tituloDia = titleFormat.format(data);
                String horaMinutos = new SimpleDateFormat("HH:mm").format(hora);
                if (!Objects.equals(dataAnterior, tituloDia)) {
                    JLabel labelTitulo = new JLabel("<html><div style='text-align: center; font-weight: bold;'>" + tituloDia + "</div></html>");
                    labelTitulo.setHorizontalAlignment(SwingConstants.CENTER);
                    panelMensagens.add(labelTitulo);
                    dataAnterior = tituloDia;
                }
                String nomeRemetente = extrairNomeRemetente(mensagem);
                String soMensagens = extrairMensagens(mensagem);
                String mensagemFormatada = mensagem;
                if (nomeRemetente != null) {
                    String cssStyle = "<style>"
                            + ".chat-message { display: flex; flex-direction: column; margin: 8px; }"
                            + ".chat-name { font-weight: bold; margin-bottom: 4px; }"
                            + ".chat-text { background-color: #DCF8C6; padding: 8px; border-radius: 8px; margin-bottom: 4px;width: 200px;overflow-y: auto;  }"
                            + ".chat-time { font-size: 10px; color: #999; }"
                            + "</style>";

                    mensagemFormatada = "<html>" + cssStyle + "<div class='chat-message'>"
                            + "<div class='chat-name'>" + nomeRemetente + "</div>"
                            + "<div class='chat-text'>" + soMensagens + "</div>"
                            + "<div class='chat-time'>" + horaMinutos + "</div>"
                            + "</div></html>";
                }
                JLabel label = new JLabel(mensagemFormatada);
                label.setBackground(Color.DARK_GRAY);
                label.setOpaque(true);
                if (nomeRemetente != null && nomeRemetente.equals(usuarioNomes.get("1"))) {
                    label.setHorizontalAlignment(SwingConstants.RIGHT);
                    label.setForeground(Color.DARK_GRAY);
                } else if (nomeRemetente != null && nomeRemetente.equals(usuarioNomes.get("2"))) {
                    label.setHorizontalAlignment(SwingConstants.LEFT);
                    label.setForeground(Color.DARK_GRAY);
                }
                panelMensagens.add(label);

                JScrollPane scrollPane = new JScrollPane(panelMensagens);
                scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

                jPanelMenssagens.removeAll();
                jPanelMenssagens.setLayout(new BorderLayout());
                jPanelMenssagens.add(scrollPane, BorderLayout.CENTER);

                SwingUtilities.invokeLater(() -> {
                    JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
                    verticalScrollBar.setValue(verticalScrollBar.getMaximum());
                    scrollPane.revalidate();
                    scrollPane.repaint();
                });

                revalidate();
                repaint();
                setVisible(true);
            }
        }
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                try {
                    atualizaMensagens();
                } catch (SQLException ex) {
                    Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        timer.schedule(task, 0, 5000);
    }

    private void adicionaBotoesUsuarios(int idUsuario) throws IOException {
        // Configura o layout vertical.
        jPanelConversa.setLayout(new BoxLayout(jPanelConversa, BoxLayout.Y_AXIS));

        List<JButton> buttons = new ArrayList<>();
        conn.executaSQL("SELECT * FROM `Usuarios` WHERE usuario_id <> " + idUsuario);

        try {
            while (conn.rs.next()) {

                String nome = conn.rs.getString("login");
                String id = conn.rs.getString("Usuario_id");
                String nomeTotal = id + " - " + nome;
                BufferedImage imagem = null; // Inicialize com null

                if (conn.rs.getBytes("imagemPerfil") != null && conn.rs.getBytes("imagemPerfil").length > 0) {
                    byte[] imagemBytes = conn.rs.getBytes("imagemPerfil");
                    ByteArrayInputStream bais = new ByteArrayInputStream(imagemBytes);
                    imagem = ImageIO.read(bais);
                }

                // Cria o botão
                JButton button = new JButton(nomeTotal);
                button.setPreferredSize(new Dimension(100, 50));

                // Configura o estilo do botão
                button.setBackground(new Color(255, 0, 0)); // Verde do WhatsApp
                button.setForeground(Color.BLACK);

                // Fonte do texto
                Font font = new Font("Arial", Font.BOLD, 16);
                button.setFont(font);

                // Borda arredondada
                button.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
                button.setFocusPainted(false); // Remove o contorno de foco
                // Define um ícone da imagem do usuário (se disponível)
                if (imagem != null) {
                    Image scaledImage = imagem.getScaledInstance(30, 30, Image.SCALE_SMOOTH);
                    button.setIcon(new ImageIcon(scaledImage));
                }

                button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JButton clickedButton = (JButton) e.getSource();
                        String buttonText = clickedButton.getText();
                        String[] partes = buttonText.split("-");

                        if (partes.length >= 2) {
                            String nome = partes[1].trim();
                            jLabelMenssagem.setText(buttonText);
                            nomeUsuarioSelecionado = nome;
                            conversa(buttonText, String.valueOf(idUsuario));
                        }
                    }
                });

                buttons.add(button);
                usuarioNomes.put(id, nome);
            }
            jLabelMenssagem.setText(buttons.get(0).getText());
            for (JButton button : buttons) {
                jPanelConversa.add(button);
            }

            jPanelConversa.setVisible(true);
            jPanelConversa.revalidate(); // Use revalidate() em vez de repaint() para atualizar o layout.
            conn.rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void conversa(String usuario, String idUsuario) {
        System.out.println(idUsuario);
        String[] partes = usuario.split("-");
        String idUsuarioSelecionado = partes[0].trim();

        conn.executaSQL("SELECT * FROM conversas WHERE (usuario1_id = " + idUsuario
                + " AND usuario2_id = " + idUsuarioSelecionado + ") OR (usuario1_id = " + idUsuarioSelecionado
                + " AND usuario2_id = " + idUsuario + ");");

        try {
            if (conn.rs.next()) {
                idConversa = conn.rs.getInt("CONVERSA_ID");

                mConversa = dConversa.getConversaById(idConversa);

                conn.executaSQL("SELECT * FROM mensagens WHERE CONVERSA_ID = " + idConversa + ";");

                if (conn.rs.next()) {
                    mensagem = conn.rs.getString("conteudo");

                    trataConversa(mensagem, (Date) mMenssagens.getData(), mMenssagens.getHora());
                } else {
                    trataConversa("", null, null);
                }
            } else {
                Conversa mConversa = new Conversa();
                mConversa.setUsuario1_id(Integer.parseInt(idUsuario));
                mConversa.setUsuario2_id(Integer.parseInt(idUsuarioSelecionado));
                mConversa.setApelido(loginUsuario);  

                dConversa.createConversa(mConversa);

                // Now retrieve the newly created conversation ID
                conn.executaSQL("SELECT CONVERSA_ID FROM Conversas WHERE usuario1_id = " + idUsuario
                        + " AND usuario2_id = " + idUsuarioSelecionado + ";");

                if (conn.rs.next()) {
                    idConversa = conn.rs.getInt("CONVERSA_ID");
                }

                trataConversa(mensagem, null, null);
            }
        } catch (SQLException ex) {
            Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String extrairMensagens(String conversa) {
        StringBuilder mensagens = new StringBuilder();

        Pattern pattern = Pattern.compile("<b>.*?</b>:<br>(.*?)<br>\\(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\)", Pattern.DOTALL);
        Matcher matcher = pattern.matcher(conversa);

        while (matcher.find()) {
            String mensagem = matcher.group(1).trim();
            mensagens.append(mensagem).append("\n"); // Adiciona a mensagem ao StringBuilder
        }

        return mensagens.toString();
    }

    private String extrairNomeRemetente(String mensagem) {
        // Use uma expressão regular para extrair o nome do remetente
        // A expressão regular assume que o nome do remetente é seguido por ":" na mensagem.
        Pattern pattern = Pattern.compile("<b>(.*?)</b>:");
        Matcher matcher = pattern.matcher(mensagem);

        if (matcher.find()) {
            // O grupo 1 da expressão regular contém o nome do remetente
            return "<html><b>" + matcher.group(1).trim() + "</b>";
        }

        // Retorna null se não for possível extrair o nome do remetente.
        return null;
    }

    private String extrairDataMensagem(String mensagem) {
        Pattern pattern = Pattern.compile("\\((.*?)\\)");
        Matcher matcher = pattern.matcher(mensagem);

        if (matcher.find()) {
            // O grupo 1 da expressão regular contém a data
            return matcher.group(1);

        } else {
            System.out.println("Data não encontrada na mensagem.");
        }
        return null;
    }

    private List<String> extrairMensagem(String conversa) {
        String dataResumida;
        List<String> mensagens = new ArrayList<>();

        // Use uma expressão regular para encontrar mensagens na string com nomes de remetentes e timestamps
        Pattern pattern = Pattern.compile("([A-Za-z ]+): (.*?)(?: (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))?$", Pattern.MULTILINE);
        Matcher matcher = pattern.matcher(conversa);

        while (matcher.find()) {
            String nomeRemetente = matcher.group(1);
            String mensagem = matcher.group(2);
            String data = matcher.group(3); // Captura o timestamp se existir
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat dateFormat2 = new SimpleDateFormat("d 'de' MMMM", new Locale("pt", "BR"));

            // Substitua o nome do remetente pelo nome do usuário correspondente
            if (usuarioNomes.containsKey(nomeRemetente)) {

                mensagem = mensagem.replace(nomeRemetente + ":", usuarioNomes.get(nomeRemetente) + ":");
            }

            mensagens.add("<html><b>" + nomeRemetente + "</b>:<br>" + mensagem + "<br>(" + data + ")");

        }
        return mensagens;
    }

    private void mandarMensagem() {
        if (jTextFieldMensagens.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo mensagem não pode ser em branco");
        } else {
            // Obtenha a data e hora atual
            LocalDateTime now = LocalDateTime.now();
            String dataformatada;
            // Defina um formato desejado para a data e hora
            DateTimeFormatter formatterDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter formatterHora = DateTimeFormatter.ofPattern("HH:mm:ss");

            // Formate a data e hora de acordo com o formato
            String formattedDate = now.format(formatterDate);
            String formattedHora = now.format(formatterHora);
            String formattedDateTime = formattedDate + " " + formattedHora;
            // Converta a String 'formattedHora' para o tipo Tiavme
            SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
            try {
                java.util.Date parsedDate = format.parse(formattedHora);
                Time time = new Time(parsedDate.getTime());

                mMenssagens = new Menssagens();
                mMenssagens.setConteudo(loginUsuario + ": " + jTextFieldMensagens.getText() + "\n");
                mMenssagens.setHora(time);
                mMenssagens.setData(new java.util.Date());
                mConversa.setApelido(loginUsuario);
                mMenssagens.setRemetente_id(idUsuario);
                mMenssagens.setConversa_id(mConversa.getConversa_id());

                try {
                    // Assuming it should be "updateConversa" instead of "upgradeConversa"
                    dMensagens.create(mMenssagens);
                    mensagemNova = idUsuario + ": " + mMenssagens.getConteudo() + " " +  formattedDateTime + "\n";
                    mensagem += mMenssagens.getConteudo();
                    trataConversa(mensagemNova, null, null);
                    jTextFieldMensagens.setText("");

                    // Separating date, time, and content
                    String date = formattedDate;
                    Time timeObject = mMenssagens.getHora();
                    String content = jTextFieldMensagens.getText();

                    // Now you can use 'date', 'timeObject', and 'content' as needed.
                } catch (SQLException ex) {
                    Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
    }
}
